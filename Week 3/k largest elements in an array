/*
Given an array of size N and an integer K, return the K largest elements from the array in descending order.

Example:
Input: arr = [3, 1, 5, 12, 10, 7], K = 3  
Output: [12, 10, 7]


*/

/*

function kLargest(arr, N, K):
    create minHeap

    for each element in arr:
        push element into minHeap
        if size(minHeap) > K:
            pop minHeap

    result = extract all elements from minHeap
    sort result in descending order
    return result


*/


import java.util.*;

public class Solution {
    public static List<Integer> kLargest(int[] arr, int n, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);

        for (int num : arr) {
            minHeap.offer(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }

        List<Integer> result = new ArrayList<>(minHeap);
        result.sort(Collections.reverseOrder()); // sort in descending order
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 5, 12, 10, 7};
        int k = 3;

        System.out.println("K largest elements: " + kLargest(arr, arr.length, k));
    }
}
