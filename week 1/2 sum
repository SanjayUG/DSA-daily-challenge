/*
Problem Statement
You are given an array of integers nums and an integer target.
Return the indices of the two numbers in nums such that they add up to the target.

You may assume that:
Each input would have exactly one solution.
You may not use the same element twice.
The answer can be returned in any order.

Example
Input:
nums = [2, 7, 11, 15]
target = 9

Output:
[0, 1]  
Because nums[0] + nums[1] = 2 + 7 = 9


*/



/*

function twoSum(nums, target):
    create an empty map

    for i from 0 to length(nums) - 1:
        requiredNumber  = target - nums[i]

        if requiredNumber exists in map:
            return [ map[requiredNumber], i ]

        store nums[i] in map with value = i

    return no solution found


*/



import java.util.HashMap;

public class TwoSum {
    public static int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>(); // value -> index
        
        for (int i = 0; i < nums.length; i++) {
            int requiredNumber = target - nums[i];
            
            if (map.containsKey(requiredNumber )) {
                return new int[] { map.get(requiredNumber), i };
            }
            
            map.put(nums[i], i); // store value with index
        }
        
    }
}
