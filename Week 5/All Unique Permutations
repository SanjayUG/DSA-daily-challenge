/*
Given a collection of numbers, nums, that may contain duplicates, return all unique permutations.

Example

Input:

nums = [1,1,2]


Output:

[[1,1,2], [1,2,1], [2,1,1]]




*/


/*

function permuteUnique(nums):
    sort(nums)
    used = [false]*n
    result = []

    function backtrack(temp):
        if length(temp) == n:
            add copy(temp) to result
            return

        for i in range(0, n):
            if used[i]: continue
            if i > 0 and nums[i] == nums[i-1] and not used[i-1]:
                continue   // skip duplicate

            used[i] = true
            temp.add(nums[i])
            backtrack(temp)
            temp.removeLast()
            used[i] = false

    backtrack([])
    return result


*/


import java.util.*;

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums); // sort to handle duplicates
        boolean[] used = new boolean[nums.length];
        backtrack(nums, used, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] nums, boolean[] used, List<Integer> temp, List<List<Integer>> result) {
        if (temp.size() == nums.length) {
            result.add(new ArrayList<>(temp));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (used[i]) continue;

            // skip duplicates
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue;

            used[i] = true;
            temp.add(nums[i]);

            backtrack(nums, used, temp, result);

            // undo choice
            used[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
}
