/*

You are given an N Ã— N adjacency matrix isConnected, where:

isConnected[i][j] = 1 â†’ city i and city j are directly connected.

isConnected[i][j] = 0 â†’ not directly connected.

A province is a group of directly or indirectly connected cities.

ðŸ‘‰ Return the number of provinces.

*/


/*
function findCircleNum(matrix):
    n = size of matrix
    visited = [false] * n
    provinces = 0

    for i in 0..n-1:
        if not visited[i]:
            DFS(i)
            provinces += 1

    return provinces

function DFS(node):
    visited[node] = true
    for neighbor in 0..n-1:
        if matrix[node][neighbor] == 1 and not visited[neighbor]:
            DFS(neighbor)



*/



class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int provinces = 0;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(isConnected, visited, i);
                provinces++;
            }
        }

        return provinces;
    }

    private void dfs(int[][] isConnected, boolean[] visited, int i) {
        visited[i] = true;
        for (int j = 0; j < isConnected.length; j++) {
            if (isConnected[i][j] == 1 && !visited[j]) {
                dfs(isConnected, visited, j);
            }
        }
    }
}
