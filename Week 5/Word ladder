/*
You are given:

Two words: beginWord and endWord.

A dictionary wordList.

You must transform beginWord â†’ endWord by changing one letter at a time, such that each intermediate word exists in wordList.

Return the minimum number of transformations required. If not possible, return 0.

*/


/*
function ladderLength(beginWord, endWord, wordList):
    if endWord not in wordList:
        return 0
    
    dict = set(wordList)
    queue = [(beginWord, 1)]   // (word, level)

    while queue not empty:
        word, level = queue.pop()

        if word == endWord:
            return level

        for i = 0 to word.length-1:
            for c in 'a' to 'z':
                nextWord = word with word[i] replaced by c
                if nextWord in dict:
                    queue.push((nextWord, level+1))
                    remove nextWord from dict  // avoid revisiting
    
    return 0



*/


import java.util.*;

public class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) return 0;

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int level = 1;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                if (word.equals(endWord)) return level;

                char[] arr = word.toCharArray();
                for (int j = 0; j < arr.length; j++) {
                    char original = arr[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        arr[j] = c;
                        String nextWord = new String(arr);
                        if (dict.contains(nextWord)) {
                            queue.offer(nextWord);
                            dict.remove(nextWord);
                        }
                    }
                    arr[j] = original;
                }
            }
            level++;
        }
        return 0;
    }
}
