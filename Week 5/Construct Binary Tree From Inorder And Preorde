/*
You are given two arrays:

Preorder traversal of a binary tree.

Inorder traversal of the same tree.

Your task is to reconstruct the original binary tree.


*/


/*

function buildTree(preorder, inorder):
    map inorder values to indices
    preorderIndex = 0
    return helper(0, inorder.length - 1)

function helper(left, right):
    if left > right: return null

    rootVal = preorder[preorderIndex++]
    root = new TreeNode(rootVal)

    inorderIndex = map[rootVal]

    root.left = helper(left, inorderIndex - 1)
    root.right = helper(inorderIndex + 1, right)

    return root


*/


import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

public class Solution {
    private int preorderIndex;
    private Map<Integer, Integer> inorderMap;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        preorderIndex = 0;
        inorderMap = new HashMap<>();

        // Store inorder values with their indexes for O(1) lookup
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

        return build(preorder, 0, inorder.length - 1);
    }

    private TreeNode build(int[] preorder, int left, int right) {
        if (left > right) return null;

        // Pick current root from preorder
        int rootVal = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootVal);

        // Split inorder into left & right
        int inorderIndex = inorderMap.get(rootVal);

        root.left = build(preorder, left, inorderIndex - 1);
        root.right = build(preorder, inorderIndex + 1, right);

        return root;
    }
}
