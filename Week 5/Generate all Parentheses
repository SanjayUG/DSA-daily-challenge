/*

Given n pairs of parentheses, generate all combinations of well-formed parentheses.

Example

Input:

n = 3


Output:

["((()))","(()())","(())()","()(())","()()()"]


*/


/*
function generateParenthesis(n):
    result = []

    function backtrack(current, open, close):
        if length(current) == 2*n:
            add current to result
            return

        if open < n:
            backtrack(current + "(", open+1, close)

        if close < open:
            backtrack(current + ")", open, close+1)

    backtrack("", 0, 0)
    return result


*/


import java.util.*;

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, "", 0, 0, n);
        return result;
    }

    private void backtrack(List<String> result, String current, int open, int close, int max) {
        if (current.length() == max * 2) {
            result.add(current);
            return;
        }

        if (open < max) {
            backtrack(result, current + "(", open + 1, close, max);
        }
        if (close < open) {
            backtrack(result, current + ")", open, close + 1, max);
        }
    }
}
