/*
You are given a 9 √ó 9 Sudoku board.
Each cell contains:

A digit 1-9, or

'.' representing empty.

üëâ Determine if the Sudoku board is valid.
(A valid Sudoku board means no duplicates in any row, column, or 3√ó3 subgrid).

‚ö†Ô∏è Note: The board may not be solvable, but must be valid so far.

Input:

[
 ["5","3",".",".","7",".",".",".","."],
 ["6",".",".","1","9","5",".",".","."],
 [".","9","8",".",".",".",".","6","."],
 ["8",".",".",".","6",".",".",".","3"],
 ["4",".",".","8",".","3",".",".","1"],
 ["7",".",".",".","2",".",".",".","6"],
 [".","6",".",".",".",".","2","8","."],
 [".",".",".","4","1","9",".",".","5"],
 [".",".",".",".","8",".",".","7","9"]
]


‚úÖ Output ‚Üí true (valid Sudoku so far).
*/



/*
function isValidSudoku(board):
    create 9 sets for rows, cols, boxes

    for i in 0..8:
        for j in 0..8:
            c = board[i][j]
            if c == '.': continue

            if c in row[i] ‚Üí return false
            add c to row[i]

            if c in col[j] ‚Üí return false
            add c to col[j]

            boxIndex = (i//3)*3 + (j//3)
            if c in box[boxIndex] ‚Üí return false
            add c to box[boxIndex]

    return true



*/


import java.util.*;

class Solution {
    public boolean isValidSudoku(char[][] board) {
        // 9 rows, 9 cols, 9 boxes
        HashSet<Character>[] rows = new HashSet[9];
        HashSet<Character>[] cols = new HashSet[9];
        HashSet<Character>[] boxes = new HashSet[9];

        for (int i = 0; i < 9; i++) {
            rows[i] = new HashSet<>();
            cols[i] = new HashSet<>();
            boxes[i] = new HashSet<>();
        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c == '.') continue;

                // Row check
                if (rows[i].contains(c)) return false;
                rows[i].add(c);

                // Column check
                if (cols[j].contains(c)) return false;
                cols[j].add(c);

                // Box check
                int boxIndex = (i / 3) * 3 + (j / 3);
                if (boxes[boxIndex].contains(c)) return false;
                boxes[boxIndex].add(c);
            }
        }

        return true;
    }
}
