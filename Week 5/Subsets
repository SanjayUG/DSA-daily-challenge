/*
Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicates.

Return in any order.


*/


/*
function subsets(nums):
    result = []
    backtrack(start = 0, current = [])
    return result

function backtrack(start, current):
    add current subset to result

    for i = start to nums.length-1:
        add nums[i] to current
        backtrack(i+1, current)
        remove last element from current  // backtrack



*/


import java.util.*;

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>(), res);
        return res;
    }

    private void backtrack(int[] nums, int start, List<Integer> current, List<List<Integer>> res) {
        res.add(new ArrayList<>(current));  // add current subset

        for (int i = start; i < nums.length; i++) {
            current.add(nums[i]);          // choose element
            backtrack(nums, i + 1, current, res);  // explore further
            current.remove(current.size() - 1);    // backtrack (undo choice)
        }
    }
}
