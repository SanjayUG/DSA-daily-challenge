/*
You are given an array arr[].
Find the maximum distance (j - i) such that:

arr[j] >= arr[i] and j >= i

Input: arr = [34, 8, 10, 3, 2, 80, 30, 33, 1]
Output: 6
Explanation: For i=1 and j=7 â†’ arr[7] = 33 >= arr[1] = 8
So distance = 7-1 = 6



*/


/*

function maxIndexDiff(arr, n):
    LMin[0] = arr[0]
    for i = 1 to n-1:
        LMin[i] = min(arr[i], LMin[i-1])

    RMax[n-1] = arr[n-1]
    for j = n-2 downto 0:
        RMax[j] = max(arr[j], RMax[j+1])

    i = 0, j = 0, maxDiff = -1
    while (i < n && j < n):
        if (LMin[i] <= RMax[j]):
            maxDiff = max(maxDiff, j - i)
            j++
        else:
            i++

    return maxDiff


*/


class Solution {
    public int maxIndexDiff(int[] arr) {
        int n = arr.length;

        int[] LMin = new int[n];
        int[] RMax = new int[n];

        // Preprocess LMin
        LMin[0] = arr[0];
        for (int i = 1; i < n; i++) {
            LMin[i] = Math.min(arr[i], LMin[i - 1]);
        }

        // Preprocess RMax
        RMax[n - 1] = arr[n - 1];
        for (int j = n - 2; j >= 0; j--) {
            RMax[j] = Math.max(arr[j], RMax[j + 1]);
        }

        int i = 0, j = 0, maxDiff = -1;
        while (i < n && j < n) {
            if (LMin[i] <= RMax[j]) {
                maxDiff = Math.max(maxDiff, j - i);
                j++;
            } else {
                i++;
            }
        }
        return maxDiff;
    }
}
