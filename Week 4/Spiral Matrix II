/*

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n² in spiral order.

✅ Example
Input: n = 3
Output:
[
 [1, 2, 3],
 [8, 9, 4],
 [7, 6, 5]
]

*/


/*

function generateMatrix(n):
    matrix = n x n zero matrix
    top = 0, bottom = n-1
    left = 0, right = n-1
    num = 1

    while num <= n*n:
        for i from left to right:
            matrix[top][i] = num++
        top++

        for i from top to bottom:
            matrix[i][right] = num++
        right--

        for i from right to left:
            matrix[bottom][i] = num++
        bottom--

        for i from bottom to top:
            matrix[i][left] = num++
        left++

    return matrix


*/

class Solution {
    public int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        int top = 0, bottom = n - 1;
        int left = 0, right = n - 1;
        int num = 1;

        while (num <= n * n) {
            // left to right
            for (int i = left; i <= right; i++) {
                matrix[top][i] = num++;
            }
            top++;

            // top to bottom
            for (int i = top; i <= bottom; i++) {
                matrix[i][right] = num++;
            }
            right--;

            // right to left
            if (top <= bottom) {
                for (int i = right; i >= left; i--) {
                    matrix[bottom][i] = num++;
                }
                bottom--;
            }

            // bottom to top
            if (left <= right) {
                for (int i = bottom; i >= top; i--) {
                    matrix[i][left] = num++;
                }
                left++;
            }
        }
        return matrix;
    }
}
