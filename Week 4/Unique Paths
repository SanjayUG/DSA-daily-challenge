/*
A robot is at the top-left corner of an m x n grid.
The robot can only move right or down at any step.
Find the number of unique paths the robot can take to reach the bottom-right corner.

âœ… Example
Input: m = 3, n = 7
Output: 28


*/


/*
function uniquePaths(m, n):
    dp = 2D array of size m x n
    for i in range(m): dp[i][0] = 1
    for j in range(n): dp[0][j] = 1

    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]

    return dp[m-1][n-1]



*/


class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        
        // first row and col = 1
        for (int i = 0; i < m; i++) dp[i][0] = 1;
        for (int j = 0; j < n; j++) dp[0][j] = 1;
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m-1][n-1];
    }
}
----

class Solution {
    public int uniquePaths(int m, int n) {
        long res = 1;
        int total = m + n - 2;
        int k = Math.min(m - 1, n - 1);  // choose smaller one to optimize

        for (int i = 1; i <= k; i++) {
            res = res * (total - k + i) / i;
        }
        return (int) res;
    }
}
